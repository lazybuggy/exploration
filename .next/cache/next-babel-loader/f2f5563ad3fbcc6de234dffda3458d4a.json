{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport fetch from 'isomorphic-unfetch';\nimport { useState } from 'react';\nexport const useSignUpForm = callback => {\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState({});\n\n  const handleSubmit = async event => {\n    var message;\n\n    if (event) {\n      event.preventDefault();\n\n      if (inputs.password1 === inputs.password2) {\n        await fetch(\"http://localhost:3000/api/users\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: _JSON$stringify({\n            firstName: inputs.firstName,\n            lastName: inputs.lastName,\n            username: inputs.username,\n            password: inputs.password1\n          })\n        }).then(async res => {\n          message = await res.json();\n        });\n      } else {\n        message = \"Please confirm that both passwords match.\";\n      }\n    }\n\n    callback(message);\n  };\n\n  const handleInputChange = event => {\n    event.persist();\n    setInputs(inputs => _objectSpread({}, inputs, {\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  return {\n    handleSubmit,\n    handleInputChange,\n    inputs\n  };\n};\nexport const useLogin = callback => {\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState({});\n\n  const handleLogin = async event => {\n    var message;\n\n    if (event) {\n      event.preventDefault();\n      await fetch(\"http://localhost:3000/api/users/\" + inputs.username, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: _JSON$stringify({\n          password: inputs.password\n        })\n      }).then(async res => {\n        message = await res.json();\n      });\n    }\n\n    callback(message);\n  };\n\n  const handleInputChange = event => {\n    event.persist();\n    setInputs(inputs => _objectSpread({}, inputs, {\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  return {\n    handleLogin,\n    handleInputChange,\n    inputs\n  };\n};","map":{"version":3,"sources":["/Users/luciaokeh/Documents/exploration/components/CustomHooks.js"],"names":["fetch","useState","useSignUpForm","callback","inputs","setInputs","handleSubmit","event","message","preventDefault","password1","password2","method","headers","body","firstName","lastName","username","password","then","res","json","handleInputChange","persist","target","name","value","useLogin","handleLogin"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport {useState} from 'react';\n\nexport const useSignUpForm = (callback) => {\n  const [inputs, setInputs] = useState({});\n\n  const handleSubmit = async (event) => {\n    var message;\n\n    if(event){\n      event.preventDefault();\n      if(inputs.password1 === inputs.password2){\n        await fetch(\"http://localhost:3000/api/users\",{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n          firstName: inputs.firstName,\n          lastName: inputs.lastName,\n          username: inputs.username,\n          password: inputs.password1,\n          })\n        }).then(async (res) => {\n          message = await res.json();\n        });\n\n      }else{\n        message = \"Please confirm that both passwords match.\"\n      }\n    }\n    callback(message);\n  }\n\n  const handleInputChange = (event) => {\n    event.persist();\n    setInputs(inputs => ({...inputs, [event.target.name]: event.target.value}));\n  }\n  return {handleSubmit, handleInputChange, inputs};\n};\n\nexport const useLogin = (callback) => {\n  const [inputs, setInputs] = useState({});\n\n  const handleLogin = async (event) => {\n    var message;\n\n    if(event){\n      event.preventDefault();\n\n      await fetch(\"http://localhost:3000/api/users/\"+inputs.username, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          password: inputs.password,\n        })\n      }).then(async (res) => {\n        message = await res.json();\n      });\n   \n    }\n    callback(message);\n  }\n\n  const handleInputChange = (event) => {\n    event.persist();\n    setInputs(inputs => ({...inputs, [event.target.name]: event.target.value}));\n  }\n  return {handleLogin, handleInputChange, inputs};\n};\n"]},"metadata":{},"sourceType":"module"}